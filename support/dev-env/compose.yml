name: patty-dev

services:
  db:
    image: postgres:15
    tmpfs:
      - /var/lib/postgresql/data
    env_file:
      - db/env
    healthcheck:
      test: ["CMD", "pg_isready", "--timeout=0", "--dbname=db", "--username=admin" ]
      interval: 0.5s

  adminer:
    image: adminer:4
    # @todo Set default DB type, host and user (see https://github.com/TimWolla/docker-adminer/issues/39#issuecomment-408568987)

  generated-files-cleaner:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app
    env_file:
      - backend/env
      - backend/secrets.env
    command: [
      "rm", "-f",
      "backend/generated/default-system-prompt.md",
      "backend/generated/openapi.json",
      "backend/generated/adapted-exercise-schema.json",
      "backend/generated/db-tables-graph.png",
      "frontend/src/openapi.ts",
      "backend/patty/export/templates/adaptation/index.html",
      "backend/patty/export/templates/adaptation-batch/index.html",
      "backend/patty/export/templates/textbook/index.html",
    ]

  adaptation-export-template-generator:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      PATTY_ENTRY_POINT_NAME: adaptation-export
    command: ["npx", "vite", "build", "--watch", "--mode", "development", "--outDir", "../backend/patty/export/templates/adaptation", "--emptyOutDir"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      npm-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/patty/export/templates/adaptation/index.html"]
      interval: 0.5s
      retries: 12

  adaptation-batch-export-template-generator:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      PATTY_ENTRY_POINT_NAME: adaptation-batch-export
    command: ["npx", "vite", "build", "--watch", "--mode", "development", "--outDir", "../backend/patty/export/templates/adaptation-batch", "--emptyOutDir"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      npm-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/patty/export/templates/adaptation-batch/index.html"]
      interval: 0.5s
      retries: 12

  textbook-export-template-generator:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      PATTY_ENTRY_POINT_NAME: textbook-export
    command: ["npx", "vite", "build", "--watch", "--mode", "development", "--outDir", "../backend/patty/export/templates/textbook", "--emptyOutDir"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      npm-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/patty/export/templates/textbook/index.html"]
      interval: 0.5s
      retries: 12

  backend-shell:
    image: patty-dev_backend
    build:
      context: ..
      dockerfile: dev-env/backend/docker/Dockerfile
      args:
        USER_ID: $USER_ID
        GROUP_ID: $GROUP_ID
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["sleep", "infinity"]
  pip-installer:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    command: ["bash", "-c", "pip install --upgrade pip; for req in requirements-*.txt; do pip --cache-dir /home/patty/.local/cache install -r $$req; done"]
  migrator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend/patty
    env_file:
      - backend/env
      - backend/secrets.env
    command: ["alembic", "upgrade", "head"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
      db:
        condition: service_healthy
  data-loader:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    command: ["python", "-m", "patty", "load-fixtures", "dummy-adaptation"]
    depends_on:
      migrator:
        condition: service_completed_successfully
  backend:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    command: ["uvicorn", "patty.asgi:app", "--reload", "--host", "0.0.0.0", "--port", "80"]
    depends_on:
      adaptation-export-template-generator:
        condition: service_healthy
      adaptation-batch-export-template-generator:
        condition: service_healthy
      textbook-export-template-generator:
        condition: service_healthy
      data-loader:
        condition: service_completed_successfully
  submission-daemon:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: [
      "watchmedo", "auto-restart", "--directory", "/app", "--pattern", "*.py", "--recursive", "--",
      "python", "-m", "patty", "run-submission-daemon"
    ]
    depends_on:
      migrator:
        condition: service_completed_successfully
  default-system-prompt-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["../support/dev-env/backend/regenerate-when-code-changes.sh", "default-system-prompt.md", "python -m patty default-system-prompt"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      pip-installer:
        condition: service_completed_successfully
  openapi-json-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["../support/dev-env/backend/regenerate-when-code-changes.sh", "openapi.json", "python -m patty openapi"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      pip-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/generated/openapi.json"]
      interval: 0.5s
      retries: 12
  adapted-exercise-json-schema-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["../support/dev-env/backend/regenerate-when-code-changes.sh", "adapted-exercise-schema.json", "python -m patty adapted-exercise-schema"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      pip-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/generated/adapted-exercise-schema.json"]
      interval: 0.5s
      retries: 12
  db-tables-graph-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["../support/dev-env/backend/regenerate-when-code-changes.sh", "db-tables-graph.png", "python -m patty db-tables-graph"]
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
      pip-installer:
        condition: service_completed_successfully
  fixtures-loader:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    command: ["uvicorn", "patty.fixtures:app", "--reload", "--host", "0.0.0.0", "--port", "80"]
    depends_on:
      data-loader:
        condition: service_completed_successfully
  db-backup:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - backend/secrets.env
    init: true
    command: ["bash", "-c", "while true; do python -m patty backup-database; find /app/support/dev-env/db/backups -name 'patty-backup-*.tar.gz' -mmin +10 -delete; sleep 30; done"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
      data-loader:
        condition: service_completed_successfully

  frontend-shell:
    image: patty-dev_frontend
    build:
      context: ..
      dockerfile: dev-env/frontend/docker/Dockerfile
      args:
        USER_ID: $USER_ID
        GROUP_ID: $GROUP_ID
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
      - /tmp/.X11-unix:/tmp/.X11-unix  # Allow running GUI apps in container, displaying on host
    working_dir: /app/frontend
    environment:
      PATTY_ENTRY_POINT_NAME: frontend
    init: true
    command: ["sleep", "infinity"]
    ports:
      - 6868:6868  # For 'npx cypress-image-diff-html-report start'
  npm-installer:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    command: ["npm", "install"]
  cypress-installer:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    command: ["npx", "cypress", "install"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
  openapi-ts-generator:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      SHELL: bash
    command: ["npx", "chokidar", "../backend/generated/openapi.json", "--silent", "--initial", "--command", "echo 'Updating frontend/src/openapi.ts because backend/generated/openapi.json changed' && npx openapi-typescript ../backend/generated/openapi.json | npx prettier --parser typescript >src/openapi.ts"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
      openapi-json-generator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/frontend/src/openapi.ts"]
      interval: 0.5s
      retries: 12
  frontend:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ../..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      PATTY_ENTRY_POINT_NAME: frontend
    command: ["npx", "vite", "--host", "0.0.0.0", "--port", "80", "--strictPort"]
    depends_on:
      openapi-ts-generator:
        condition: service_healthy
      adapted-exercise-json-schema-generator:
        condition: service_healthy

  fanout:
    image: nginx:latest
    ports:
      - 8080:8080
    volumes:
      - ./fanout/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      adminer:
        condition: service_started
      backend:
        condition: service_started
      frontend:
        condition: service_started
