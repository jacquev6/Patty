name: patty-dev

services:
  backend-shell:
    image: patty-dev_backend
    build:
      context: ..
      dockerfile: dev-env/backend/docker/Dockerfile
      args:
        USER_ID: $USER_ID
        GROUP_ID: $GROUP_ID
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    init: true
    command: ["sleep", "infinity"]
  pip-installer:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    command: ["pip", "install", "--user", "-r", "requirements-dev.txt", "-r", "requirements-run.txt"]
  backend:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    command: ["uvicorn", "patty.asgi:app", "--reload", "--host", "0.0.0.0", "--port", "80"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
  generated-files-cleaner:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app
    env_file:
      - backend/secrets.env
    command: ["rm", "-f", "backend/openapi.json", "backend/adapted-exercise-schema.json", "frontend/src/openapi.ts"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
  openapi-json-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    command: ["bash", "-c", 'echo "Generating backend/openapi.json for the first time" && python -m patty openapi openapi.json']
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
  openapi-json-regenerator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    init: true
    command: [
      "watchmedo", "shell-command",
      "--command", 'test $${watch_event_type} = closed && echo "Updating backend/openapi.json because $${watch_src_path} changed" && python -m patty openapi openapi.json',
      "--recursive",
      "--ignore-directories",
      "--ignore-patterns", "*/__pycache__/*",
      "patty"
    ]
    depends_on:
      openapi-json-generator:
        condition: service_completed_successfully
  adapted-exercise-json-schema-generator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    command: ["bash", "-c", 'echo "Generating backend/adapted-exercise-schema.json for the first time" && python -m patty adapted-exercise-schema adapted-exercise-schema.json']
    depends_on:
      generated-files-cleaner:
        condition: service_completed_successfully
  adapted-exercise-json-schema-regenerator:
    image: patty-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - ./backend/pip-packages:/home/patty/.local
    working_dir: /app/backend
    env_file:
      - backend/secrets.env
    init: true
    command: [
      "watchmedo", "shell-command",
      "--command", 'test $${watch_event_type} = closed && echo "Updating backend/adapted-exercise-schema.json because $${watch_src_path} changed" && python -m patty adapted-exercise-schema adapted-exercise-schema.json',
      "--recursive",
      "--ignore-directories",
      "--ignore-patterns", "*/__pycache__/*",
      "patty"
    ]
    depends_on:
      adapted-exercise-json-schema-generator:
        condition: service_completed_successfully

  frontend-shell:
    image: patty-dev_frontend
    build:
      context: ..
      dockerfile: dev-env/frontend/docker/Dockerfile
      args:
        USER_ID: $USER_ID
        GROUP_ID: $GROUP_ID
    volumes:
      - ..:/app
      - ./frontend/cache:/home/patty/.cache
      - /tmp/.X11-unix:/tmp/.X11-unix  # Allow running GUI apps in container, displaying on host
    working_dir: /app/frontend
    init: true
    command: ["sleep", "infinity"]
    ports:
      - 6868:6868  # For 'npx cypress-image-diff-html-report start'
  npm-installer:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    command: ["npm", "install"]
  cypress-installer:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    command: ["npx", "cypress", "install"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
  openapi-ts-regenerator:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    environment:
      SHELL: bash
    command: ["npx", "chokidar", "../backend/openapi.json", "--silent", "--initial", "--command", "echo 'Updating frontend/openapi.ts because backend/openapi.json changed' && npx openapi-typescript ../backend/openapi.json | npx prettier --parser typescript >src/openapi.ts"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
      openapi-json-generator:
        condition: service_completed_successfully
  frontend:
    image: patty-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
      - ./frontend/cache:/home/patty/.cache
    working_dir: /app/frontend
    command: ["npx", "vite", "--host", "0.0.0.0", "--port", "80", "--strictPort"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully

  fanout:
    image: nginx:latest
    ports:
      - 8080:8080
    volumes:
      - ./fanout/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
