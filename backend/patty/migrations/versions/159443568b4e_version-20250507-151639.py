from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

revision: str = "159443568b4e"
down_revision: Union[str, None] = "239538041ab7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "adaptation_strategy_settings_branches",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("head_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.CheckConstraint("name != ''", name=op.f("ck_adaptation_strategy_settings_branches_name_not_empty")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_adaptation_strategy_settings_branches")),
        sa.UniqueConstraint("name", name=op.f("uq_adaptation_strategy_settings_branches_name")),
    )
    op.alter_column("adaptation_strategies", "settings_id", existing_type=sa.INTEGER(), nullable=False)
    op.drop_column("adaptation_strategies", "system_prompt")
    op.drop_column("adaptation_strategies", "response_specification")
    op.add_column("adaptation_strategy_settings", sa.Column("branch_id", sa.Integer(), nullable=True))
    op.add_column("adaptation_strategy_settings", sa.Column("parent_id", sa.Integer(), nullable=True))
    op.create_unique_constraint(
        op.f("uq_adaptation_strategy_settings_id_branch_id"), "adaptation_strategy_settings", ["id", "branch_id"]
    )
    op.create_foreign_key(
        op.f("fk_adaptation_strategy_settings_branch_id_adaptation_strategy_settings_branches"),
        "adaptation_strategy_settings",
        "adaptation_strategy_settings_branches",
        ["branch_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_adaptation_strategy_settings_parent_id_branch_id_adaptation_strategy_settings"),
        "adaptation_strategy_settings",
        "adaptation_strategy_settings",
        ["parent_id", "branch_id"],
        ["id", "branch_id"],
    )
    op.drop_constraint(
        "fk_adaptation_adaptations_batch_id_adaptation_batches", "adaptation_adaptations", type_="foreignkey"
    )
    op.drop_column("adaptation_strategy_settings", "name")
    op.create_table(
        "adaptation_textbooks",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_by", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.CheckConstraint("title != ''", name=op.f("ck_adaptation_textbooks_title_not_empty")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_adaptation_textbooks")),
    )
    op.add_column(
        "adaptation_adaptations",
        sa.Column("removed_from_textbook", sa.Boolean(), server_default="false", nullable=False),
    )
    op.add_column("adaptation_batches", sa.Column("textbook_id", sa.Integer(), nullable=True))
    op.add_column(
        "adaptation_batches", sa.Column("removed_from_textbook", sa.Boolean(), server_default="false", nullable=False)
    )
    op.create_foreign_key(
        op.f("fk_adaptation_batches_textbook_id_adaptation_textbooks"),
        "adaptation_batches",
        "adaptation_textbooks",
        ["textbook_id"],
        ["id"],
    )
    # ### end Alembic commands ###
    op.create_foreign_key(
        op.f("fk_adaptation_strategy_settings_branches_head_id_id_adaptation_strategy_settings"),
        "adaptation_strategy_settings_branches",
        "adaptation_strategy_settings",
        ["head_id", "id"],
        ["id", "branch_id"],
    )
    op.create_check_constraint(
        op.f("ck_adaptation_strategy_settings_branch_required_if_parent"),
        "adaptation_strategy_settings",
        "parent_id IS NULL OR branch_id IS NOT NULL",
    )
