import TriColoredInput from './TriColoredInput.vue'
import assert from './assert'

const blackColor = 'rgb(0, 0, 0)'
const unitsColor = 'rgb(0, 0, 255)'
const tensColor = 'rgb(255, 0, 0)'
const hundredsColor = 'rgb(0, 204, 0)'

describe('TriColoredNumericalInput', () => {
  it('colors model value', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span').first().should('have.text', '12345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('colors keyboard insertions', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '' } })
    cy.get('span').first().focus().type('12345')
    cy.get('span').first().should('have.text', '12345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('refuses non-digits insertions', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '' } })
    cy.get('span').first().focus().type('1a2B3;4*5')
    cy.get('span').first().should('have.text', '12345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('allows non-digits insertions', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: false, modelValue: '147' } })
    cy.get('span').first().focus().type('{end}blah')
    cy.get('span').first().should('have.text', '147blah')
    cy.get('span:contains("1")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("7")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("b")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("l")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("a")').last().should('have.css', 'color', blackColor)
    cy.get('span:contains("h")').last().should('have.css', 'color', blackColor)
  })

  it('handles backspace from the right', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span').first().focus().type('{end}{backspace}')
    cy.get('span').first().should('have.text', '1234')
    cy.get('span:contains("4")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', unitsColor)
    cy.get('span').first().type('{backspace}')
    cy.get('span:contains("3")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', hundredsColor)
    cy.get('span').first().type('{backspace}')
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
    cy.get('span').first().type('{backspace}')
    cy.get('span:contains("1")').last().should('have.css', 'color', unitsColor)
    cy.get('span').first().type('{backspace}')
    cy.get('span').should('have.length', 1)
    cy.get('span').first().type('{backspace}')
    cy.get('span').should('have.length', 1)
    cy.get('span').first().type('12345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('handles backspace in the middle', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span')
      .first()
      .focus()
      .then((span) => {
        const selection = document.getSelection()
        assert(selection !== null)
        selection.removeAllRanges()
        const range = document.createRange()
        range.setStart(span[0], 3)
        range.setEnd(span[0], 3)
        selection.addRange(range)
      })
    cy.get('span').first().type('{backspace}')
    cy.get('span').first().should('have.text', '1245')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', unitsColor)
  })

  it('handles backspace on a selection', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span')
      .first()
      .focus()
      .then((span) => {
        const selection = document.getSelection()
        assert(selection !== null)
        selection.removeAllRanges()
        const range = document.createRange()
        range.setStart(span[0], 1)
        range.setEnd(span[0], 4)
        selection.addRange(range)
      })
    cy.get('span').first().type('{backspace}')
    cy.get('span').first().should('have.text', '15')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('handles del from the left', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span').first().focus().type('{del}')
    cy.get('span').first().should('have.text', '2345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span').first().focus().type('{del}')
    cy.get('span').first().should('have.text', '345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span').first().focus().type('{del}')
    cy.get('span').first().should('have.text', '45')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span').first().focus().type('{del}')
    cy.get('span').first().should('have.text', '5')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span').first().focus().type('{del}')
    cy.get('span').should('have.length', 1)
    cy.get('span').first().focus().type('{del}')
    cy.get('span').should('have.length', 1)
    cy.get('span').first().type('12345')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("3")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('handles del in the middle', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span')
      .first()
      .focus()
      .then((span) => {
        const selection = document.getSelection()
        assert(selection !== null)
        selection.removeAllRanges()
        const range = document.createRange()
        range.setStart(span[0], 2)
        range.setEnd(span[0], 2)
        selection.addRange(range)
      })
    cy.get('span').first().type('{del}')
    cy.get('span').first().should('have.text', '1245')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("4")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("2")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', unitsColor)
  })

  it('handles del on a selection', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span')
      .first()
      .focus()
      .then((span) => {
        const selection = document.getSelection()
        assert(selection !== null)
        selection.removeAllRanges()
        const range = document.createRange()
        range.setStart(span[0], 1)
        range.setEnd(span[0], 4)
        selection.addRange(range)
      })
    cy.get('span').first().type('{del}')
    cy.get('span').first().should('have.text', '15')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })

  it('replaces full selection', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span').first().focus().type('{selectall}{del}6789')
    cy.get('span').first().should('have.text', '6789')
    cy.get('span:contains("9")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("8")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("7")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("6")').last().should('have.css', 'color', unitsColor)
  })

  it('replaces partial selection', () => {
    cy.mount(TriColoredInput, { props: { digitsOnly: true, modelValue: '12345' } })
    cy.get('span')
      .first()
      .focus()
      .then((span) => {
        const selection = document.getSelection()
        assert(selection !== null)
        selection.removeAllRanges()
        const range = document.createRange()
        range.setStart(span[0], 1)
        range.setEnd(span[0], 4)
        selection.addRange(range)
      })
    cy.get('span').first().type('789')
    cy.get('span').first().should('have.text', '17895')
    cy.get('span:contains("5")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("9")').last().should('have.css', 'color', tensColor)
    cy.get('span:contains("8")').last().should('have.css', 'color', hundredsColor)
    cy.get('span:contains("7")').last().should('have.css', 'color', unitsColor)
    cy.get('span:contains("1")').last().should('have.css', 'color', tensColor)
  })
})
